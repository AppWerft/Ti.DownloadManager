/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2017 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package de.appwerft.downloadmanager;

import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import android.database.Cursor;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;

import android.app.DownloadManager;
import android.database.Cursor;

// This proxy can be created by calling Dell.createExample({message: "hello world"})
@Kroll.proxy(creatableInModule = TiDownloadmanagerModule.class)
public class TrackerProxy extends KrollProxy {

	// Standard Debugging variables
	private static final String LCAT = TiDownloadmanagerModule.LCAT;
	
	@Kroll.constant
	public static int VISIBILITY_VISIBLE = DownloadManager.Request.VISIBILITY_VISIBLE;
	@Kroll.constant
	public static int VISIBILITY_HIDDEN = DownloadManager.Request.VISIBILITY_HIDDEN;
	@Kroll.constant
	public static int VISIBILITY_VISIBLE_NOTIFY_COMPLETED = DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED;
	@Kroll.constant
	public static int VISIBILITY_VISIBLE_NOTIFY_ONLY_COMPLETION = DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_ONLY_COMPLETION;
	
	private static DownloadManager downloader = TiDownloadmanagerModule.dMgr;
	private Timer cron;
	private Long interval= 1000L;
	private TimerTask observeDownloadManager;
	

	public TrackerProxy() {
		super();
	}
	
	public void handleCreationArgs(@Kroll.argument(optional = true) KrollModule module, Object[] args) {
		
		if (args != null && args[0] instanceof Long) {
			interval = (Long) args[0];
			super.handleCreationArgs(createdInModule, args);
		}
	}
	
	@Kroll.method
    public void startProgressTracker() {
		cron = new Timer();
        long delay = 0;   // delay for 30 sec.
        Long period = interval;  // repeat every 60 sec.
        observeDownloadManager = new TimerTask() {
          public void run() {
        		DownloadManager.Query query = new DownloadManager.Query();
        		Cursor c = downloader.query(query);
      		c.moveToFirst();
      		while (c.moveToNext()) {
      			
      		}
      		c.close();
                       

          }
        };
       cron.scheduleAtFixedRate(observeDownloadManager, delay, period);
		
	}	
	@Kroll.method
    public void stopProgressTracker() {
		
		
	}
	
	

}